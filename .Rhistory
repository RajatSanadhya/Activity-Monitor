R.version.string
install.packages("survival")
barplot(t)
install.packages("ggplot2")
install.packages("devtools")
sessionInfo()
help(package="ggplot2")
browseVignettes(ggplot2)
browseVignettes("ggplot2")
install.packages("KernSmooth")
library(KernSmooth)
llibrary(swirl)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
install_course_directory()
library(swirl)
install_course('Getting and Cleaning Data')
install_from_swirl("Getting and Cleaning Data")
swirl::install_course("Getting and Cleaning Data")
swirl::install_course("Getting and Cleaning Data")
install_from_swirl("Getting and Cleaning Data")
swirl::insta
swirl::install_course()
install_from_swirl("Getting_and_Cleaning_Data")
swirl::install_course()
swirl()
library(swirl)
swirl()
my_df = read.csv(path2csv,stringsAsFactors = FALSE)
mydf = read.csv(path2csv,stringsAsFactors = FALSE)
rm(my_df)
rm(mydf)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
rm(mydf)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm(mydf)
rm(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran,ip_id,package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
-5:20
-(5:20)
select(cran,-(X:size))
filter(cran,package == 'swirl')
filter(cran, r_version=="3.1.1", country=='US')
?Comparision
?Comparison
filter(cran, r_version=="3.1.1", country=='IN')
filter(cran, r_version<="3.0.2", country=='IN')
filter(cran, country=='US'|country=='IN')
filter(cran, size>100500,r_os='linux-gnu')
filter(cran, size>100500,r_os=='linux-gnu')
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size/2^20)
mutate(cran3,size_gb = size_mb/2^10)
mutate(cran3,size_mb = size/2^20,size_gb=size_mb/2^10)
mutate(cran3,size=size+1000)
mutate(cran3,correct_size=size+1000)
summarise(cran,avg_bytes=mean(size))
summarize(cran,avg_bytes=mean(size))
library(dplyr)
rm(list = c(by_package,cran,cran2,cran3))
rm(list = c("by_package","cran","cran2","cran3"))
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,avg_size=mean(size))
summarize(by_package,mean(size))
submit()
pack_sum
quantile(pack_sum$count,probs = 0.99)
filter(pack_sum,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique,probs = 0.99)
filter(pack_sum,unique>465)
top_unique<-filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
rm(list = ls())
library(tidyr)
swirl()
students
?gather
gather(students,students,sex,count,-grade)
gather(students,"students","sex","count",-grade)
gather(students,"students","sex",-grade)
gather(students,"sex","count",-grade)
gather(students,sex,count,-grade)
students2
res<-gather(students2,key = 'sex_class', value = 'count')
res<-gather(students2,key = 'sex_class', value = 'count',-grade)
res<-gather(students2,sex_class, count,-grade)
res
?separate
separate(res,sex_class,c('sex','class'))
submit()
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
library(readr)
parse_number('class5')
submit()
students
students4
students4
submit()
submit()
submit()
submit()
passed
failed
passed<-mutate(passed,status='passed')
failed<-mutate(failed,status='failed')
bind_rows(passed,failed)
sat
submit()
submit()
submit()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package=lubridate)
today()
this_day<-today()
this_day
day(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
ymd("March 12, 1975")
mdy("March 12, 1975")
mdy(25081985)
dmy(25081985)
ymd('192012')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
this_moment<-update(this_moment,hours=8,minutes=34,seconds=55)
this_moment
nyc<-now(tzone = "America/New_York")
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17,minutes=34)
depart
arrive<-depart+hours(15)+miinutes(50)
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time<-mdy("June 17,2008",tz = 'Singapore')
last_time<-mdy("June 17,2008",tz = "Singapore")
last_time<-mdy("June 17, 2008",tz = "Singapore")
last_time
?interval
how_long<-interval(last_time,arrive)
as.period(how_long)
stopwatch()
exit()
quit
quit()
getwd()
setwd("/Users/rajat/Desktop/DataScienceCoursera/Cleaning Data Assignment/")
getwd()
quit()
q()
q()
library("data.table")
library("ggplot2")
fileUrl <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(fileUrl, destfile = paste0("/Users/mgalarny/Desktop", '/repdata%2Fdata%2FStormData.csv.bz2'))
stormDF <- read.csv("/Users/mgalarny/Desktop/repdata%2Fdata%2FStormData.csv.bz2")
getwd()
q()
library("data.table")
library("ggplot2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", file.path(getwd(),"Data/data.bz2"))
stormDF <- read.csv("Data/data.bz2")
library("data.table")
library("ggplot2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", file.path(getwd(),"Data/data.bz2"), method = "curl")
library("data.table")
library("ggplot2")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", file.path(getwd(),"Data/data.bz2"))
stormDF <- read.csv("Data/data.bz2")
getwd()
install.packages('tinytex')
library(tinytex)
library(tinytex)
Sys.which(pdflatex)
Sys.which("pdflatex")
q()
getwd()
setwd("/Users/rajat/Desktop/DataScienceCoursera/Practical Machine Learning/Activity-Monitor/")
getwd()
install.packages("caret")
install.packages("rpart")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = file.path(getwd(),"Data/training.csv"))
print(c(c(1,2),c(3,4)))
c(1,2)
c(c(1,2),c(3,4))
c(c("Train",1,2),c(3,4))
c(c("Train_>",1,2),c(3,4))
print("train",c(1,2))
print("train"+c(1,2))
print(paste("train",c(1,2)))
c<-matrix(1:9,3,3)
dim(c)
print(paste("train",c))
print(paste("train",dim(c)))
print("train->"dim(c))
print("train->",dim(c))
print("train->dim(c)")
print("train->"+dim(c))
cat("train", dim(c))
cat("train", dim(c)[1])
cat("train", dim(c))
rm(c)
print(cat("T",2+2))
print(cat("F",2-2))
cat("T",2+2)
cat("F",2-2)
install.packages("rpart.plot")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = file.path(getwd(),"Data/training.csv"))
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = file.path(getwd(),"Data/testing.csv"))
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("Train Data Dimensions : ", dim(train))
cat("Test Data Dimensions : ", dim(test))
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
train <- train[, (colSums(is.na(training)) == 0)]
train <- train[, (colSums(is.na(train)) == 0)]
test <- test[, (colSums(is.na(train)) == 0)]
train <- train[, !grepl("^X|timestamp|user_name", names(training01))]
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(train))]
train <- train[, !nearZeroVar(trainRaw, saveMetrics = TRUE)$nzv]
library(caret)
library(rpart)
library(rpart.plot)
train <- train[, !nearZeroVar(trainRaw, saveMetrics = TRUE)$nzv]
train <- train[, !nearZeroVar(train, saveMetrics = TRUE)$nzv]
test <- test[, !nearZeroVar(train, saveMetrics = TRUE)$nzv]
cat("Train Data Dimensions : ", dim(train))
cat("Test Data Dimensions : ", dim(test))
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
train <- train[, (colSums(is.na(train)) == 0)]
test <- test[, (colSums(is.na(train)) == 0)]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(training)) == 0)
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
rm(cols)
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(train))]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(test))]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols_nzv <-nearZeroVar(train, saveMetrics = TRUE)$nzv
train <- train[, !cols_nzv]
test <- test[, cols_nzv]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols_nzv <-nearZeroVar(train, saveMetrics = TRUE)$nzv
train <- train[, !cols_nzv]
test <- test[, !cols_nzv]
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
rm(cols)
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(test))]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols_nzv <-nearZeroVar(train, saveMetrics = TRUE)$nzv
train <- train[, !cols_nzv]
test <- test[, !cols_nzv]
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
set.seed(1407) # For reproducibile purpose
index_train <- createDataPartition(train$classe, p = 0.80, list = FALSE)
validation <- train[-index_train, ]
train <- train[index_train, ]
rm(index_train)
modelTree <- rpart(classe ~ ., data = train, method = "class")
prp(modelTree)
confusionMatrix(validation$classe, predict(modelTree, validation, type = "class"))
predictions <- predict(modelTree, validation, type = "class")
confusionMatrix(validation$classe, predictions)
#predictions <- predict(modelTree, validation, type = "class")
head(validation)
#confusionMatrix(validation$classe, predictions)
#predictions <- predict(modelTree, validation, type = "class")
head(validation$classe)
#confusionMatrix(validation$classe, predictions)
#predictions <- predict(modelTree, validation, type = "class")
class(validation$classe)
#confusionMatrix(validation$classe, predictions)
predictions <- predict(modelTree, validation, type = "class")
head(predictions)
#confusionMatrix(validation$classe, predictions)
#predictions <- predict(modelTree, validation, type = "class")
class(predictions)
#confusionMatrix(validation$classe, predictions)
predictions <- predict(modelTree, validation, type = "class")
confusionMatrix(validation$classe, predictions)
#predictions <- predict(modelTree, validation, type = "class")
head(factor(validation$classe))
#confusionMatrix(validation$classe, predictions)
#predictions <- predict(modelTree, validation, type = "class")
head(factor(predictions))
#confusionMatrix(validation$classe, predictions)
predictions <- predict(modelTree, validation, type = "class")
confusionMatrix(factor(validation$classe), predictions)
install.packages("e1071")
predictions <- predict(modelTree, validation, type = "class")
confusionMatrix(factor(validation$classe), predictions)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = trainControl(method = "cv", 4), ntree = 200)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = trainControl(method = "cv", 4), ntree = 200)
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = trainControl(method = "cv", 4), ntree = 200)
confusionMatrix(factor(validation$classe), predict(modelRF, validation))
confusionMatrix(factor(validation$classe), predict(model_rf, validation))
predict(model_rf, testing[, -length(names(testing))])
predict(model_rf, test[, -length(names(testing))])
predict(model_rf, test[, -length(names(test))])
?render
getwd()
dir()
render("Project.Rmd","html_document","Project.html")
library(rmarkdown)
render("Project.Rmd","html_document","Project.html")
render("Project.Rmd","html_document","Project.html")
render("Project.Rmd","html_document","Project.html")
if (!file.exists(file.path(getwd(),"Data/training.csv"))) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = file.path(getwd(),"Data/training.csv"))
}
if (!file.exists(file.path(getwd(),"Data/testing.csv"))) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = file.path(getwd(),"Data/testing.csv"))
}
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
rm(cols)
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("\nTrain Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
rm(cols)
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(test))]
cols_nzv <-nearZeroVar(train, saveMetrics = TRUE)$nzv
train <- train[, !cols_nzv]
test <- test[, !cols_nzv]
rm(cols_nzv)
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
if (!file.exists(file.path(getwd(),"Data/training.csv"))) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = file.path(getwd(),"Data/training.csv"))
}
if (!file.exists(file.path(getwd(),"Data/testing.csv"))) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = file.path(getwd(),"Data/testing.csv"))
}
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("\nTrain Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
rm(cols)
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(test))]
cols_nzv <-nearZeroVar(train, saveMetrics = TRUE)$nzv
train <- train[, !cols_nzv]
test <- test[, !cols_nzv]
rm(cols_nzv)
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
set.seed(1407) # For reproducibile purpose
index_train <- createDataPartition(train$classe, p = 0.80, list = FALSE)
validation <- train[-index_train, ]
train <- train[index_train, ]
rm(index_train)
modelTree <- rpart(classe ~ ., data = train, method = "class")
prp(modelTree)
confusionMatrix(factor(validation$classe), predict(modelTree, validation, type = "class"))
model_rf <- train(classe ~ ., data = train, method = "rf", trControl = trainControl(method = "cv", 4), ntree = 200)
q()
library(caret)
library(rpart)
library(rpart.plot)
if (!file.exists(file.path(getwd(),"Data/training.csv"))) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile = file.path(getwd(),"Data/training.csv"))
}
if (!file.exists(file.path(getwd(),"Data/testing.csv"))) {
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile = file.path(getwd(),"Data/testing.csv"))
}
train <- read.csv("Data/training.csv")
test <- read.csv("Data/testing.csv")
cat("\nTrain Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
cols <- (colSums(is.na(train)) == 0)
train <- train[, cols]
test <- test[, cols]
rm(cols)
train <- train[, !grepl("^X|timestamp|user_name", names(train))]
test <- test[, !grepl("^X|timestamp|user_name", names(test))]
cols_nzv <-nearZeroVar(train, saveMetrics = TRUE)$nzv
train <- train[, !cols_nzv]
test <- test[, !cols_nzv]
rm(cols_nzv)
cat("Train Data Dimensions : ", dim(train))
cat("\nTest Data Dimensions : ", dim(test))
render("Project.Rmd","html_document","Project.html")
library(rmarkdown)
render("Project.Rmd","html_document","Project.html")
render("Project.Rmd","html_document","Project.html")
getwd()
q()
